/** \page parallelpage Parallel computation



\tableofcontents



\section scripts Scripts

\b Rack support defining command sequences -- scripts -- that can be invoked repeatedly within one command line.
The script is then executed automatically for \e each \e input:

\code
rack --script '<cnd> <cmd2> ...'  <file> <file2> <file3> ...
\endcode  

So,  \c --inputFile <file> command – or simply \c <file> – implicitly triggers the script. 

One can also invoke the script explicitly with \c --execScript command. 


Defining a script also turns on \e variable \e expansion -- see also examples in \ref templates . 

\subsection script_sites Example: product generation for each volume.

In the following example, several measurement volume files are read. For each file, two products (Pseudo CAPPI at 500 meters and Echo Top with 20 dBZ threshold)
are computed, then converted to Cartesian projections and finally stored to files.

\code
rack --script '--pCappi 500 -c -o cappi-${NOD}.h5 --pEchoTop 20 -c -o echoTop-${NOD}.h5'  data/pvol_fi*.h5 
\endcode

In the example, special internal variable \c ${NOD} is derived automatically from compound \c ${what:source} variable of the input. 
One may likewise use \c ${what:date} and \c ${what:time} , for example. 

\note \b Rack denotes variables \c ${...} like shell environments, so single hyphens are often useful for preventing variable expansion in shell.
Supported variable values can be listed with \c --status command.

By default, unless \c --append data was used, the resulting meteorological product is kept in the local context. This means
that data from several radars can be processed and also stored as parallel processes.

Instead of the command line, one may also execute commands stored in a file as follows:
\code
rack <file>  --execFile <cmdFile>   
\endcode  

Remember that plain filenames are implicit <tt>--inputFile \<file\></tt> commands; hence the file can also be a list of input files.
Using such a file together with  \c --script yields compact command lines especially in compositing.

\~remark
The functionality is handy for example in running anomaly detection and product generation for a set of files.
\~

Scripting becomes even more powerful when combined to parallel computations explained next.

\note The commands that automatically run ie. \em trigger the script can be listed with \c --help \c trigger .


\section parallel_intro Parallel computation – using multiple threads



In processing radar data, some computations can be run independently in separate threads. 
In \b Rack, parallel computation can be enabled flexibly on command line.
Parallel computing is enabled by putting a desired command sequence inside braces: \c [...] .

\subsection parallel_script Scheme 1: invoking predefined script for every input

This method is best illustrated by adjusting the above example with braces:

\code
rack --script '--pCappi 500 -c -o cappi-${NOD}.h5 --pEchoTop 20 -c -o echoTop-${NOD}.h5' [ data/pvol_fi*.h5 ]
\endcode

Within braces, <tt>[--inputFile] <file></tt> command will trigger the defined script in a separate, parallel thread.

More schematically, consider a command line invocation of \b Rack 
\code
rack --cmd --cmd ...  --sript '--cmd --cmd ...'  [ --CMD1 --cmd2 --CMD3 --CMD4 -cmd5 ... ]  --cmd --cmd ...
\endcode
marking thread-triggering commands with \c CMD and other commands with \c cmd. 
A schematic decomposition of such a line is shown below:
\dot
  digraph parallel1 {
  
  size="14,12";
  label = "Parallel processing -- Command line structure";
  rankdir=LR;
  node [shape=record, fontsize=10];
  edge [color=black, fontsize=10];
  headport="n";
  fontsize=10;
  
    CMD_INITIAL [ label="Shared initialisation |<i>rack --cmd --cmd ..."];
    CMD_SCRIPT  [ label="Script definition |<i> --sript '--cmd --cmd...' ", color="red", URL="\ref script" ];
    CMD_ACTIONS [ label="Basic commands (cmd...) and \n script triggering commands (CMD..) |<i>[ --CMD1 --cmd2 --CMD3 --CMD4 -cmd5 ... ] ", color="red", URL="\ref productspage" ];
    CMD_FINAL   [ label="Shared final commands |<i> --cmd --cmd ..."];
    CMD_INITIAL:i -> CMD_SCRIPT:i -> CMD_ACTIONS:i -> CMD_FINAL:i ;
  
  }
\enddot

During execution, \b Rack creates and maintains certain resources in memory for commands to read and write: a polar volume, a polar product,
Cartesian product and compositing arrays. (See the scheme in \ref intro .)
A thread has private resources -- its so called \e context -- in addition to shared resources called the \e base  \e context. 
As a principle in threads, any data loaded or created in the thread are used instead of those of the main thread (base context).    
Especially, a composite (accumulation array) initialized in the main thread will serve the threads as a shared resource unless (until)
a new composite is initialized or loaded in the thread. Commands use internal logic in selecting data.

The following picture illustrates how the above command line structure is actually computed. 


\dot
  digraph parallel2 {
  
  size="14,12";
  label = "Computation scheme. Commands CMD1, CMD3, and CMD4 are run in parallel threads.";
  rankdir=LR;
  node [shape=record, fontsize=10];
  edge [color=black, fontsize=10];
  headport="n";
  fontsize=10;
  
    INITIAL	[ label="Shared initialisation |<i>rack --cmd --cmd ...  "];
 	FORK	[ label="Start threads |<i> [", color="red" ];
	MAIN	[ label="{ <CMD1> | --cmd2 | <CMD2> |<CMD3>| --cmd5 | <end>...} "];  
    JOIN	[ label="Join threads |<i>]", color="red" ];
  	FINAL   [ label="Shared final commands |<i>  --cmd --cmd ..."];
	
  	THREAD1 [ label="{<i>--CMD1|<s> --cmd --cmd ...}", color="red", URL="\ref input" ];
    THREAD2 [ label="{<i>--CMD3|<s> --cmd --cmd ...}", color="red", URL="\ref input" ];
    THREAD3 [ label="{<i>--CMD4|<s> --cmd --cmd ...}", color="red", URL="\ref input" ];

	INITIAL:i -> FORK:i -> MAIN:CMD1 [weight=10];
	MAIN:end  -> JOIN:i [weight=10];
 	JOIN:i ->  FINAL:i [weight=10];


    MAIN:CMD1 -> THREAD1:i [style=dashed];
    MAIN:CMD2 -> THREAD2:i [style=dotted];
    MAIN:CMD3 -> THREAD3:i [style=dotted];  

	THREAD1:s -> JOIN:i [style=dashed];
	THREAD2:s -> JOIN:i [style=dotted];
	THREAD3:s -> JOIN:i [style=dotted];

  }
\enddot


\subsection parallel_instant Scheme 2: direct parallel command sequences

Instead of a predefined script, commands can be run parallel by 
putting them inside braces and separating independent command sequences to threads with a
slash \c '/' .

\code
rack <cmd>  [ <cmd> <cmd> ... / <cmd> <cmd> ... / <cmd> <cmd> ... ] <cmd> 
\endcode

Example:

\code
rack  volume.h5 [ --cMethod AVERAGE --pCappi 500 --cSize 200 -c -o 'cappi-${NOD}.h5' /  --pEchoTop 20 --cSize 500 -c -o 'echoTop-${NOD}.h5' ] 
\endcode


\section parallel_examples Examples 





\subsection parallel_acc Accumulation

For accumulating polar data, Rack uses a shared accumulation array, enabling parallelizing the process in straightforward way: 

\code
rack  --script '--pAdd' [ data-acc/2017*.h5 ] --encoding C --pExtract 'dw' -o accumulated-parallel.h5
\endcode

However, parallel computing does not provide much advantage because actual computing is simple
and file read is more a slowing factor.


\subsection parallel_compositing Parallel compositing

\subsubsection parallel_compositing_full One-pass scheme

The following example creates a composite as a single command line -- as a single yet parallelized computation job:
\code
rack   --cMethod WAVG,2,3,-32  --cProj '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs' \
       --cSize 2000,2000 --cBBox 0,47,40,73    --cInit    --script '--pCappi 1500 --cAdd' \
        [  data-20140924/201409241200_radar.raw.*.h5 ] \
         --cExtract d  -o composite-parallel.h5
\endcode

\subsubsection parallel_compositing_tile Tiled scheme

(Under construction.) In operational environment, one typically has system-level parallel processes in receiving radar data,
hence there is less use in designing \i parallel tiled compositing in Rack level.
See the single-thread \ref tiledcompositing instead.


\note Experimental design - not tested operationally

\subsection parallel_future Future extensions

\note Not supported in current version

\subsubsection parallel_anom Anomaly detection 

\code
rack volume.h5 [ --aBird '' --aSpeckle '' ] --aRemover 0.5 -o vol-anom-paral.h5
\endcode

\subsubsection parallel_products Product generation 

Given a single volume as input, generate products to separate \c /dataset groups:
\code
rack volume.h5 --append dataset [ --pCappi 500 --pEchoTop 20dBZ ] -o vol-prod-paral.h5
\endcode

\subsubsection parallel_anom_products Anomaly detection and product generation combined

As anomaly detectors are independent of each other, they can be computed in parallel, each updating the resulting quality field (\c QIND quantity)
when completed. Finally, the combined detection field can be used for removing the anomalies in the volume. 

\code
rack volume.h5 [ --aBird '' --aSpeckle '' ] --aRemover 0.5 --append dataset [ --pCappi 500 --pEchoTop 20dBZ ] -o vol-anom-prod-paral.h5
\endcode



*/